{"version":3,"sources":["logo.svg","components/Header/Header.components.jsx","components/Recipes/Recipes.components.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","class","type","placeholder","onChange","handleClick","onClick","handlebtn","Recipes","src","recipe","image","alt","label","ingredientLines","map","ingre","App","state","recipes","searchField","input","setState","e","componentDidMount","url","this","fetch","then","res","json","data","hits","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,kKCE9BC,G,kBAAS,SAACC,GACnB,OACI,yBAAKC,UAAU,WACX,yBAAKC,MAAM,cACP,uBAAGD,UAAU,cAAb,eACA,yBAAKC,MAAM,yBACP,2BAAOC,KAAK,OAAOD,MAAM,eAAgBE,YAAY,kBAAkBC,SAAUL,EAAMM,cACnF,yBAAKJ,MAAM,sBACP,4BAAQA,MAAM,eAAeC,KAAK,SAASI,QAASP,EAAMQ,WAA1D,gBCEfC,G,MAAU,SAACT,GAEpB,OAIQ,yBAAKE,MAAM,QACP,yBAAKA,MAAM,wCAAwCQ,IAAKV,EAAMW,OAAOA,OAAOC,MAAOC,IAAI,mBACnF,yBAAKX,MAAM,aACP,wBAAIA,MAAM,cAAcF,EAAMW,OAAOA,OAAOG,OAC5C,uBAAGZ,MAAM,aAAY,4BAChBF,EAAMW,OAAOA,OAAOI,gBAAgBC,KAAK,SAAAC,GAAK,OAAI,4BAAKA,YCuBrEC,E,4MAvCbC,MAAM,CACJC,QAAQ,GACRC,YAAY,W,EAWhBf,YAAa,SAACgB,GACV,EAAKC,SAAS,CAACF,YAAYC,K,EAG7Bd,UAAU,SAACgB,GACV,EAAKC,qB,kEAZc,IAAD,OACXC,EAAI,mCAAD,OAAoCC,KAAKR,MAAME,YAA/C,WAAqE,WAArE,YAA2F,oCACpGO,MAAMF,GACLG,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAI,OAAE,EAAKT,SAAS,CAACH,QAAQY,EAAKC,Y,+BAcnC,IAAD,SACoBN,KAAKR,MADzB,EACDC,QADC,EACOC,YAIb,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAa,SAACkB,GAAD,OAAK,EAAKlB,YAAYkB,EAAEU,OAAOC,QAAS3B,UAAW,SAACgB,GAAK,EAAKhB,eAClFmB,KAAKR,MAAMC,QAAQJ,KAAI,SAACL,GAAD,OAAU,kBAAC,EAAD,CAASA,OAAQA,Y,GAjCtCyB,IAAMC,WCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e776cd94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Header.styles.css';\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"heading\">\r\n            <div class=\"jumbotron \">\r\n                <p className=\"webheading\">Food Recipe</p>\r\n                <div class=\"input-group mb-3 w-50\">\r\n                    <input type=\"text\" class=\"form-control\"  placeholder=\"Search Recipe..\" onChange={props.handleClick}  />\r\n                        <div class=\"input-group-append\">\r\n                            <button class=\"btn btn-dark\" type=\"button\" onClick={props.handlebtn} >Search</button>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './Recipes.style.css';\r\n//import {Ingredient} from './components/Ingredients/Ingredients.components.jsx';\r\n/*<div className=\"recipe-info\">\r\n\r\n            <div className=\"recipe-info-1\">\r\n                <p>{props.recipe.recipe.label}</p>\r\n                <ul>\r\n                    {props.recipe.recipe.ingredientLines.map((ingre => <li>{ingre}</li>))}\r\n                </ul>\r\n            </div>*/\r\n\r\nexport const Recipes = (props) => {\r\n\r\n    return (\r\n        \r\n\r\n        \r\n            <div class=\"card\" >\r\n                <img class=\"img-fluid w-50 mx-auto rounded-circle\" src={props.recipe.recipe.image} alt=\"Card image cap\"/>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{props.recipe.recipe.label}</h5>\r\n                        <p class=\"card-text\"><ul>\r\n                            {props.recipe.recipe.ingredientLines.map((ingre => <li>{ingre}</li>))}\r\n                        </ul></p>\r\n                        \r\n                    </div>\r\n            </div>\r\n        \r\n            \r\n    \r\n            \r\n\r\n\r\n\r\n            \r\n\r\n\r\n)\r\n\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Header} from './components/Header/Header.components.jsx';\nimport {Recipes} from './components/Recipes/Recipes.components.jsx';\n\nclass App  extends React.Component{\n  state={\n    recipes:[],\n    searchField:\"chicken\"\n  };\n\n\n  componentDidMount(){\n    const url=`https://api.edamam.com/search?q=${this.state.searchField}&app_id=${\"3b95d1fa\"}&app_key=${\"7ea51fdb8a0e6f9a698e0a84f6f6ebd1\"}`;\n    fetch(url)\n    .then(res=>(res.json()))\n    .then(data=>this.setState({recipes:data.hits}))\n  };\n\nhandleClick= (input)=>{\n    this.setState({searchField:input});\n  }\n\n  handlebtn=(e)=>{\n   this.componentDidMount();\n\n  }\n\n\n\nrender(){\nconst {recipes,searchField}=this.state;\n  \n  \n\n  return (\n    <div className=\"App\">\n      <Header handleClick={(e)=>this.handleClick(e.target.value)}  handlebtn={(e)=>{this.handlebtn()}}/> \n      {this.state.recipes.map((recipe)=><Recipes recipe={recipe} />)}\n       \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}